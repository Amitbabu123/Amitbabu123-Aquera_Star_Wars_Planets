{"ast":null,"code":"var _jsxFileName = \"E:\\\\Aquera\\\\frontend_challange\\\\src\\\\components\\\\PlanetCard.js\",\n  _s = $RefreshSig$();\n// src/components/PlanetCard.js\n\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, Typography } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlanetCard = ({\n  planet\n}) => {\n  _s();\n  const [residents, setResidents] = useState([]);\n  useEffect(() => {\n    const fetchResidents = async () => {\n      try {\n        const residentsData = await Promise.all(planet.residents.map(async residentUrl => {\n          const response = await fetch(residentUrl);\n          return await response.json();\n        }));\n        setResidents(residentsData);\n      } catch (error) {\n        console.error('Error fetching residents:', error);\n      }\n    };\n    fetchResidents();\n  }, [planet.residents]);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        component: \"h2\",\n        children: planet.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"textSecondary\",\n        gutterBottom: true,\n        children: [\"Climate: \", planet.climate]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"textSecondary\",\n        gutterBottom: true,\n        children: [\"Population: \", planet.population]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"textSecondary\",\n        gutterBottom: true,\n        children: [\"Terrain: \", planet.terrain]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"textSecondary\",\n        gutterBottom: true,\n        children: [\"Residents:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: residents.map((resident, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: resident.name\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(PlanetCard, \"RzLAUQ5GJczYjz0OYoaAJykFDdE=\");\n_c = PlanetCard;\nexport default PlanetCard;\nvar _c;\n$RefreshReg$(_c, \"PlanetCard\");","map":{"version":3,"names":["React","useState","useEffect","Card","CardContent","Typography","jsxDEV","_jsxDEV","PlanetCard","planet","_s","residents","setResidents","fetchResidents","residentsData","Promise","all","map","residentUrl","response","fetch","json","error","console","children","variant","component","name","fileName","_jsxFileName","lineNumber","columnNumber","color","gutterBottom","climate","population","terrain","resident","index","_c","$RefreshReg$"],"sources":["E:/Aquera/frontend_challange/src/components/PlanetCard.js"],"sourcesContent":["// src/components/PlanetCard.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, Typography } from '@mui/material';\r\n\r\nconst PlanetCard = ({ planet }) => {\r\n  const [residents, setResidents] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchResidents = async () => {\r\n      try {\r\n        const residentsData = await Promise.all(\r\n          planet.residents.map(async residentUrl => {\r\n            const response = await fetch(residentUrl);\r\n            return await response.json();\r\n          })\r\n        );\r\n        setResidents(residentsData);\r\n      } catch (error) {\r\n        console.error('Error fetching residents:', error);\r\n      }\r\n    };\r\n\r\n    fetchResidents();\r\n  }, [planet.residents]);\r\n\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          {planet.name}\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\r\n          Climate: {planet.climate}\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\r\n          Population: {planet.population}\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\r\n          Terrain: {planet.terrain}\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\r\n          Residents:\r\n          <ul>\r\n            {residents.map((resident, index) => (\r\n              <li key={index}>{resident.name}</li>\r\n            ))}\r\n          </ul>\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default PlanetCard;\r\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,IAAI,EAAEC,WAAW,EAAEC,UAAU,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9D,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EACjC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACd,MAAMW,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMC,aAAa,GAAG,MAAMC,OAAO,CAACC,GAAG,CACrCP,MAAM,CAACE,SAAS,CAACM,GAAG,CAAC,MAAMC,WAAW,IAAI;UACxC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,WAAW,CAAC;UACzC,OAAO,MAAMC,QAAQ,CAACE,IAAI,CAAC,CAAC;QAC9B,CAAC,CACH,CAAC;QACDT,YAAY,CAACE,aAAa,CAAC;MAC7B,CAAC,CAAC,OAAOQ,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD;IACF,CAAC;IAEDT,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACJ,MAAM,CAACE,SAAS,CAAC,CAAC;EAEtB,oBACEJ,OAAA,CAACJ,IAAI;IAAAqB,QAAA,eACHjB,OAAA,CAACH,WAAW;MAAAoB,QAAA,gBACVjB,OAAA,CAACF,UAAU;QAACoB,OAAO,EAAC,IAAI;QAACC,SAAS,EAAC,IAAI;QAAAF,QAAA,EACpCf,MAAM,CAACkB;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,eACbxB,OAAA,CAACF,UAAU;QAACoB,OAAO,EAAC,OAAO;QAACO,KAAK,EAAC,eAAe;QAACC,YAAY;QAAAT,QAAA,GAAC,WACpD,EAACf,MAAM,CAACyB,OAAO;MAAA;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACd,CAAC,eACbxB,OAAA,CAACF,UAAU;QAACoB,OAAO,EAAC,OAAO;QAACO,KAAK,EAAC,eAAe;QAACC,YAAY;QAAAT,QAAA,GAAC,cACjD,EAACf,MAAM,CAAC0B,UAAU;MAAA;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpB,CAAC,eACbxB,OAAA,CAACF,UAAU;QAACoB,OAAO,EAAC,OAAO;QAACO,KAAK,EAAC,eAAe;QAACC,YAAY;QAAAT,QAAA,GAAC,WACpD,EAACf,MAAM,CAAC2B,OAAO;MAAA;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACd,CAAC,eACbxB,OAAA,CAACF,UAAU;QAACoB,OAAO,EAAC,OAAO;QAACO,KAAK,EAAC,eAAe;QAACC,YAAY;QAAAT,QAAA,GAAC,YAE7D,eAAAjB,OAAA;UAAAiB,QAAA,EACGb,SAAS,CAACM,GAAG,CAAC,CAACoB,QAAQ,EAAEC,KAAK,kBAC7B/B,OAAA;YAAAiB,QAAA,EAAiBa,QAAQ,CAACV;UAAI,GAArBW,KAAK;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAqB,CACpC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACV,CAAC;AAEX,CAAC;AAACrB,EAAA,CA/CIF,UAAU;AAAA+B,EAAA,GAAV/B,UAAU;AAiDhB,eAAeA,UAAU;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}